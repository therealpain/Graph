#include <bits/stdc++.h> 
#define fi first 
#define se second

using namespace std;

const long long INF = 1e18;
const int mod = 1e9 + 7;
const int N = 1e3 + 1;

bool mini (int &a, int b) { 
	if (a > b) a = b; else return false; return true;
}
bool maxi (int &a, int b) { 
	if (a < b) a = b; else return false; return true; 
}

vector <int> a[N];
long long f[N][N];
int n, m, s, t;

bool bfs(int s, int t, int parent[]) {
	vector <int> visit(N + 1, 0);
	queue <int> q;
	q.push(s);
	visit[s] = 1;
	parent[s] = -1;

	while (!q.empty()) {
		int u = q.front();
		q.pop();
		for (int v = 0; v < N; ++v) {
			if (!visit[v] && f[u][v] > 0) {
				visit[v] = 1;
				parent[v] = u;
				q.push(v);
			}
		}
	}
	return (visit[t] == 1);
}

int solve(int s, int t) {
	long long max_flow = 0;
	int u, v;
	int parent[N];
	for (int i = 0; i < N; ++i) 
		parent[i] = 0;
	while (bfs(s, t, parent)) {
		long long path_flow = 1e15;
		for (v = t; v != s; v = parent[v]) {
			u = parent[v];
			path_flow = min(path_flow, f[u][v]);
		}

		for (v = t; v != s; v = parent[v]) {
			u = parent[v];
			f[u][v] -= path_flow;
			f[v][u] += path_flow;
		}
		max_flow += path_flow;
	}

	return max_flow;
}

int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cin >> n >> m >> s >> t;
	for (int i = 0; i < m; ++i) {
		int u, v, c;
		cin >> u >> v >> c;
		f[u][v] = c;
		a[u].push_back(v);
	}
	cout << solve(s, t);
}
